{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dhairyasummi/python/blob/main/Copy_of_Assignment_Functions_and_Methods.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Aq5jjKHb-zdZ"
      },
      "source": [
        "# <u> Problem 1</u>\n",
        "\n",
        "### Write a function which takes the excel column name as an input and returns the corresponding column number. A few examples are :\n",
        "\n",
        "* column name = <code>'J'</code> , column number = <code>10</code>\n",
        "* column name = <code>'AP'</code> , column number = <code>42</code>\n",
        "* column name = <code>'AAA'</code>, column number = <code>703</code>\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Un0QXOa3-zdb"
      },
      "source": [
        "def get_excel_column_number(column_name):\n",
        "\n",
        "\n",
        "    letters  = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n",
        "    numbers  = list(range(1, 27))\n",
        "\n",
        "    # Zip them together into a dict\n",
        "    letter_to_num = dict(zip(letters, numbers))\n",
        "\n",
        "    # ── Step 2 : Scan from the rightmost character, base-26 style ────\n",
        "    total  = 0\n",
        "    power  = 0\n",
        "\n",
        "    for ch in reversed(column_name.upper()):\n",
        "        total += letter_to_num[ch] * (26 ** power)\n",
        "        power += 1\n",
        "\n",
        "    return total\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VFSrFUwP-zdd"
      },
      "source": [
        "# Check\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AZaQlyAc-zde"
      },
      "source": [
        "# Check\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RhJ16y5TRrDi"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I-5eBWXa1Mla"
      },
      "source": [
        "# <u> Problem 2 </u>\n",
        "\n",
        "### Write a Python function which takes a sentence and a length value as inputs and returns the counts of those words from the sentence whose length is equal to the provided input length value.\n",
        "\n",
        "### Suppose if the input for the length value is 5, it will return the count of all those words which are of length 5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9ueu9nJx1uUZ"
      },
      "source": [
        "marvel_quote = \"The world has changed and none of us can go back. All we can do is our best, and sometimes the best that we can do is to start over.\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9OPAUOCT2VQW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4045207d-1ad8-49bb-bb87-3e9850030b5e"
      },
      "source": [
        "marvel_quote = (\"The world has changed and none of us can go back. \"\n",
        "                \"All we can do is our best, and sometimes the best \"\n",
        "                \"that we can do is to start over.\")\n",
        "\n",
        "def fixed_length_word_counts(sentence, length=5):\n",
        "    # 1) remove commas and periods\n",
        "    cleaned = sentence.replace(\",\", \"\").replace(\".\", \"\")\n",
        "\n",
        "    # 2) split into words\n",
        "    words = cleaned.split()\n",
        "\n",
        "    # 3) count words of the desired length\n",
        "    count = 0\n",
        "    for w in words:\n",
        "        if len(w) == length:\n",
        "            count += 1\n",
        "    return count\n",
        "\n",
        "# Example usage\n",
        "print(fixed_length_word_counts(marvel_quote, length=5))  # → 6\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Px7OQG0j2iab"
      },
      "source": [
        "# Check on the sample sentence\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
